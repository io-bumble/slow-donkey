/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.bumble.slowdonkey.server.persistence;

import io.bumble.slowdonkey.common.util.SingletonUtil;
import io.bumble.slowdonkey.server.data.DataTree;

import java.io.*;

/**
 * The snapshot file name is as `snapshot-{timestamp}.dat`.
 * The {timestamp} is the create time of the file generated by {@code System.currentTimeMillis()}.
 *
 * @author shenxiangyu on 2020/03/31
 */
public class Snapshot {

    private String md5;

    private String lastTxnId;

    public static Snapshot getInstance() {
        return SingletonUtil.getInstance(Snapshot.class);
    }

    /**
     * Load snapshot from files, and recover the data tree from the snapshot file content.
     *
     * @param dataTree data tree which will be recovered
     * @return true for success
     */
    public boolean fromFile(DataTree dataTree) {

        boolean success;
        // TODO load all the snapshot files order by timestamp, recover the snapshot.
        for (int i = 0; i < 10; i ++) {
            if (fromFile(dataTree, "")) {
                return true;
            }
        }
        return false;
    }

    /**
     * Save the data tree to snapshot file
     *
     * @param dataTree data tree
     * @return true for success
     */
    public boolean toFile(DataTree dataTree) {

        dataTree.toBytes();

        try {
            OutputStream outputStream = new FileOutputStream("");
            DataOutputStream dataOutputStream = new DataOutputStream(outputStream);

            // Write last transaction id
            dataOutputStream.writeLong(123);

            byte[] bytes = dataTree.toBytes();

            int dataLen = bytes.length;

            // Write data tree length
            dataOutputStream.writeInt(dataLen);

            // Write data tree bytes
            dataOutputStream.write(dataTree.toBytes());
        } catch (IOException e) {

        } finally {

        }
        return false;
    }

    public String getMd5() {
        return null;
    }

    public void setMd5(String md5) {
        this.md5 = md5;
    }

    public String getLastTxnId() {
        return lastTxnId;
    }

    public void setLastTxnId(String lastTxnId) {
        this.lastTxnId = lastTxnId;
    }

    private boolean fromFile(DataTree dataTree, String fileName) {
        try {
            InputStream inputStream = new FileInputStream("");
            DataInputStream dataInputStream = new DataInputStream(inputStream);

            // Read last transaction id
            dataInputStream.readLong();

            // Read data tree length
            int dataLen = dataInputStream.readInt();

            byte[] bytes = new byte[dataLen];

            // Read data tree bytes
            dataInputStream.read(bytes);

            return dataTree.fromBytes(bytes);
        } catch (IOException e) {
            // TODO
        } finally {
            // TODO
        }
        return false;
    }
}
