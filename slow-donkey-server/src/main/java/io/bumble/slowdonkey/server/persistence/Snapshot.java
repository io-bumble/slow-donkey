/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.bumble.slowdonkey.server.persistence;

import io.bumble.slowdonkey.common.util.SingletonUtil;
import io.bumble.slowdonkey.server.data.DataTree;
import io.bumble.slowdonkey.server.property.SlowDonkeyServerPropertyHolder;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.*;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

/**
 * The snapshot file name is as `snapshot-{timestamp}.dat`.
 * The {timestamp} is the create time of the file generated by {@code System.currentTimeMillis()}.
 *
 * @author shenxiangyu on 2020/03/31
 */
public class Snapshot {

    private Logger logger = LoggerFactory.getLogger(Snapshot.class);

    private String md5;

    private long lastTxnId;

    public static Snapshot getInstance() {
        return SingletonUtil.getInstance(Snapshot.class);
    }

    /**
     * Load snapshot from files, and recover the data tree from the snapshot file content.
     *
     * @param dataTree data tree which will be recovered
     * @return true for success
     */
    public boolean loadDataTreeFromSnapshotFile(DataTree dataTree) {

        List<File> snapshotFiles = getSnapshotFiles();

        for (File snapshotFile : snapshotFiles) {
            if (loadDataTreeFromSnapshotFile(dataTree, snapshotFile.getAbsolutePath())) {
                return true;
            }
        }
        return false;
    }

    /**
     * Save the data tree to snapshot file.
     * File name is composed by last transaction id and term e.g. {txnId}-{term}.dat
     *
     * @param dataTree data tree
     * @return true for success
     */
    public boolean saveDataTreeToSnapshotFile(DataTree dataTree) {

        String snapshotFileName = dataTree.getLastTxnId() + '-' + dataTree.getTerm() + ".dat";
        String snapshotFullPathFileName = SlowDonkeyServerPropertyHolder.getInstance().getSnapshotFilePath().getValue() +
                '/' + snapshotFileName;

        try (OutputStream outputStream = new FileOutputStream(snapshotFullPathFileName);
             DataOutputStream dataOutputStream = new DataOutputStream(outputStream)) {

            // TODO checksum

            byte[] bytes = dataTree.toBytes();

            int dataLen = bytes.length;

            // Write data tree length
            dataOutputStream.writeInt(dataLen);

            // Write data tree bytes
            dataOutputStream.write(bytes);

            lastTxnId = dataTree.getLastTxnId();

            return true;
        } catch (IOException e) {
            logger.error("Save data tree to snapshot file failed.", e);
        }
        return false;
    }

    public String getMd5() {
        return null;
    }

    public void setMd5(String md5) {
        this.md5 = md5;
    }

    public long getLastTxnId() {
        return lastTxnId;
    }

    public void setLastTxnId(long lastTxnId) {
        this.lastTxnId = lastTxnId;
    }

    /**
     * Load data tree from snapshot file
     *
     * @param dataTree data tree model
     * @param fullPathFileName snapshot file path
     * @return true on success
     */
    private boolean loadDataTreeFromSnapshotFile(DataTree dataTree, String fullPathFileName) {

        try (InputStream inputStream = new FileInputStream(fullPathFileName);
             DataInputStream dataInputStream = new DataInputStream(inputStream)) {

            // Read last transaction id
            this.lastTxnId = dataInputStream.readLong();

            // Read data tree length
            int dataLen = dataInputStream.readInt();

            byte[] bytes = new byte[dataLen];

            // Read data tree bytes
            int dataRead = dataInputStream.read(bytes);
            if (dataRead != dataLen) {
                logger.error("Data read failed, the data length read is invalid.");
                return false;
            }

            return dataTree.fromBytes(bytes);
        } catch (IOException e) {
            logger.error("Load snapshot failed.", e);
        }
        return false;
    }

    /**
     * Get snapshot files order by the transaction id, the newest the snapshot file will be at the first place.
     *
     * @return snapshot file list
     */
    private List<File> getSnapshotFiles() {

        String path = SlowDonkeyServerPropertyHolder.getInstance().getSnapshotFilePath().getValue();
        File fileDirectory = new File(path);
        File[] files = fileDirectory.listFiles();
        if (files == null) {
            return Collections.emptyList();
        }

        // TODO order by transaction id
        return Arrays.asList(files);
    }
}
